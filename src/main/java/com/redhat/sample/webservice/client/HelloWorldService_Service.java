package com.redhat.sample.webservice.client;

import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 3.1.8.redhat-1
 * 2018-01-29T12:51:16.101-02:00
 * Generated source version: 3.1.8.redhat-1
 * 
 */
@WebServiceClient(name = "HelloWorldService", 
                  wsdlLocation = "classpath:wsdl/HelloWorldService.wsdl",
                  targetNamespace = "http://www.jboss.org/eap/quickstarts/wshelloworld/HelloWorld") 
public class HelloWorldService_Service extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.jboss.org/eap/quickstarts/wshelloworld/HelloWorld", "HelloWorldService");
    public final static QName HelloWorld = new QName("http://www.jboss.org/eap/quickstarts/wshelloworld/HelloWorld", "HelloWorld");
    static {
        URL url = HelloWorldService_Service.class.getClassLoader().getResource("META-INF/wsdl/HelloWorldService.wsdl");
        System.out.println("*****  URL: " + url);
        WSDL_LOCATION = url;
    }

    public HelloWorldService_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public HelloWorldService_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public HelloWorldService_Service() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public HelloWorldService_Service(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public HelloWorldService_Service(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public HelloWorldService_Service(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns HelloWorldService
     */
    @WebEndpoint(name = "HelloWorld")
    public HelloWorldService getHelloWorld() {
        return super.getPort(HelloWorld, HelloWorldService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HelloWorldService
     */
    @WebEndpoint(name = "HelloWorld")
    public HelloWorldService getHelloWorld(WebServiceFeature... features) {
        return super.getPort(HelloWorld, HelloWorldService.class, features);
    }

}
